{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","App.tsx","api/todos.ts","index.tsx"],"names":["UserInfo","user","className","href","email","name","TodoInfo","todo","id","classNames","completed","title","TodoList","todos","map","username","getUser","userId","usersFromServer","find","getTodoId","currentTodos","todosId","Math","max","App","useState","setCurrentTodo","newTodoTitle","setNewTodoTitle","selectedUserId","setSelectedUserId","titleError","setTitleError","userError","setUserError","action","method","onSubmit","event","preventDefault","trim","type","placeholder","value","onChange","target","split","filter","char","toUpperCase","toLocaleLowerCase","Number","isNaN","join","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.82fbb959.chunk.js","sourcesContent":["export interface User {\n  id: number;\n  name: string;\n  username: string;\n  email: string;\n}\n\ntype UserProps = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<UserProps> = ({ user }) => (\n  <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n    {user.name}\n  </a>\n);\n","import classNames from 'classnames';\nimport { User, UserInfo } from '../UserInfo';\n\nexport interface Todo {\n  id: number;\n  title: string;\n  completed: boolean;\n  userId: number;\n  user: User | null;\n}\n\ntype TodoProps = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<TodoProps> = ({ todo }) => (\n  <article\n    data-id={todo.id}\n    className={classNames(\n      'TodoInfo',\n      { 'TodoInfo--completed': todo.completed },\n    )}\n  >\n    <h2 className=\"TodoInfo__title\">\n      {todo.title}\n    </h2>\n\n    {todo.user && <UserInfo user={todo.user} />}\n  </article>\n);\n","import { TodoInfo, Todo } from '../TodoInfo';\n\ntype TodoListProps = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<TodoListProps> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo\n          todo={todo}\n          key={todo.id}\n        />\n      ))}\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { useState } from 'react';\nimport { TodoList } from './components/TodoList';\nimport { User } from './components/UserInfo';\nimport { Todo } from './components/TodoInfo';\n\nimport './App.scss';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nfunction getUser(userId: number): User | null {\n  const foundUser = usersFromServer.find(user => user.id === userId);\n\n  return foundUser || null;\n}\n\nconst todos = [...todosFromServer].map(todo => ({\n  ...todo,\n  user: getUser(todo.userId),\n}));\n\nfunction getTodoId(currentTodos: Todo[]): number {\n  const todosId = currentTodos.map(todo => todo.id);\n  const largestId = Math.max(...todosId);\n\n  return largestId + 1;\n}\n\nfunction titleCheck(title: string): string {\n  const correctTitle = title\n    .split('')\n    .filter(char => char.toUpperCase() !== char.toLocaleLowerCase()\n      || char === ' '\n      || !Number.isNaN(Number(char)));\n\n  return correctTitle.join('');\n}\n\nexport const App = () => {\n  const [currentTodos, setCurrentTodo] = useState(todos);\n  const [newTodoTitle, setNewTodoTitle] = useState('');\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [titleError, setTitleError] = useState(false);\n  const [userError, setUserError] = useState(false);\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    setNewTodoTitle(newTodoTitle.trim());\n\n    if (newTodoTitle && selectedUserId) {\n      setCurrentTodo([\n        ...currentTodos,\n        {\n          id: getTodoId(currentTodos),\n          title: newTodoTitle,\n          completed: false,\n          userId: selectedUserId,\n          user: getUser(selectedUserId),\n        },\n      ]);\n\n      setNewTodoTitle('');\n      setSelectedUserId(0);\n\n      return;\n    }\n\n    if (!newTodoTitle) {\n      setTitleError(true);\n    }\n\n    if (!selectedUserId) {\n      setUserError(true);\n    }\n  };\n\n  const handleChangeTitle = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitleError(false);\n    setNewTodoTitle(titleCheck(event.target.value));\n  };\n\n  const handleChangeUserId = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setUserError(false);\n    setSelectedUserId(+event.target.value);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            placeholder=\"Enter a title\"\n            value={newTodoTitle}\n            onChange={handleChangeTitle}\n          />\n          {titleError && <span className=\"error\">Please enter a title</span>}\n        </div>\n\n        <div className=\"field\">\n          <select\n            data-cy=\"userSelect\"\n            value={selectedUserId}\n            onChange={handleChangeUserId}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n            {usersFromServer.map(user => (\n              <option\n                value={user.id}\n                key={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n\n          {userError && <span className=\"error\">Please choose a user</span>}\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n        >\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={currentTodos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}